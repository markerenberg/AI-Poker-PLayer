{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "LightGBM with SMOTE.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/markerenberg/AI-Poker-Player/blob/master/RandomForest_SMOTE_SMBO\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_6AvEhk7_upV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Check if GPU is enabled\n",
        "import tensorflow as tf\n",
        "tf.test.gpu_device_name()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GHXV-Uu90Ldo",
        "colab_type": "code",
        "outputId": "210dd651-0b11-472c-cac1-fee3c06c7f32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        }
      },
      "source": [
        "##\n",
        "## =======================================================\n",
        "## Mark Erenberg \n",
        "## Toxic Comment Classification Challenge\n",
        "## =======================================================\n",
        "##\n",
        "\n",
        "# Objective: Create a model which predicts a probability of each type of toxicity for each comment.\n",
        "\n",
        "# import dependencies and files\n",
        "\n",
        "import os\n",
        "import time\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy import sparse\n",
        "from scipy.sparse import hstack\n",
        "import itertools\n",
        "import matplotlib.pyplot as plt\n",
        "import re\n",
        "import tempfile\n",
        "import warnings\n",
        "import ast\n",
        "\n",
        "import lightgbm as lgb\n",
        "\n",
        "import nltk\n",
        "from nltk.stem.snowball import SnowballStemmer\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "from nltk.corpus import wordnet\n",
        "from nltk import pos_tag, word_tokenize\n",
        "\n",
        "import gensim\n",
        "import gensim.models.keyedvectors as word2vec\n",
        "from gensim.models.fasttext import FastText\n",
        "from gensim.models.word2vec import Word2Vec\n",
        "\n",
        "import spacy\n",
        "import en_core_web_sm\n",
        "spacy_nlp = en_core_web_sm.load()\n",
        "spacy_nlp = spacy.load('en_core_web_sm')\n",
        "from spacy.lemmatizer import Lemmatizer\n",
        "\n",
        "from collections import Counter, defaultdict\n",
        "\n",
        "from sklearn import utils\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, precision_recall_curve, average_precision_score, classification_report\n",
        "from sklearn.model_selection import RandomizedSearchCV, GridSearchCV, train_test_split\n",
        "\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "from keras.layers import Dense, Input, LSTM, Embedding, Bidirectional, Dropout, Activation\n",
        "from keras.layers import Bidirectional, GlobalMaxPool1D\n",
        "from keras.models import Model, Sequential\n",
        "from keras import initializers, regularizers, constraints, optimizers, layers\n",
        "from keras.optimizers import Adam\n",
        "from keras.callbacks import Callback\n",
        "\n",
        "from imblearn.over_sampling import SMOTE, SVMSMOTE\n",
        "from imblearn.under_sampling import RandomUnderSampler, TomekLinks\n",
        "from imblearn.combine import SMOTETomek\n",
        "from imblearn.pipeline import Pipeline\n",
        "\n",
        "################### Data Loading ###################\n",
        "#os.chdir('C:\\\\Users\\\\marke\\\\Downloads\\\\Toxic Classification')\n",
        "train = pd.read_csv('train.csv').fillna('')\n",
        "test = pd.read_csv('test.csv').fillna('')\n",
        "\n",
        "train_text = train[['id','comment_text']].drop_duplicates()\n",
        "df = pd.concat([train_text,test],axis=0,ignore_index=True)\n",
        "\n",
        "################### Data Cleaning ####################\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('averaged_perceptron_tagger')\n",
        "nltk.download('punkt')\n",
        "\n",
        "wpt = nltk.WordPunctTokenizer()\n",
        "stop_words = nltk.corpus.stopwords.words('english')\n",
        "cv = CountVectorizer(min_df=0., max_df=1.)\n",
        "\n",
        "# Simple way to get the number of occurence of a regex\n",
        "def count_regexp_occ(regexp=\"\", text=None):\n",
        "    return len(re.findall(regexp, text))\n",
        "\n",
        "# Determine if file words exist:\n",
        "#print(len(df[df['comment_text'].str.contains('jpg')]))\n",
        "#print(len(df[df['comment_text'].str.contains('jpeg')]))\n",
        "#print(len(df[df['comment_text'].str.contains('http')]))\n",
        "#print(len(df[df['comment_text'].str.contains('pdf')]))\n",
        "#print(len(df[df['comment_text'].str.contains('html')]))\n",
        "\n",
        "# Remove non-alphabetic characters and split tokens by spaces/newlines\n",
        "def clean_document(doc):\n",
        "    # 1) Convert string to lower\n",
        "    #doc = bytes(doc.lower(), encoding=\"utf-8\")\n",
        "    doc = doc.lower()\n",
        "    # 2) Replace contracion patterns\n",
        "    cont_patterns = [\n",
        "    (r'(W|w)on\\'t', r'will not'),\n",
        "    (r'(C|c)an\\'t', r'can not'),\n",
        "    (r'(I|i)\\'m', r'i am'),\n",
        "    (r'(A|a)in\\'t', r'is not'),\n",
        "    (r'(\\w+)\\'ll', r'\\g<1> will'),\n",
        "    (r'(\\w+)n\\'t', r'\\g<1> not'),\n",
        "    (r'(\\w+)\\'ve', r'\\g<1> have'),\n",
        "    (r'(\\w+)\\'s', r'\\g<1> is'),\n",
        "    (r'(\\w+)\\'re', r'\\g<1> are'),\n",
        "    (r'(\\w+)\\'d', r'\\g<1> would'),\n",
        "    ]\n",
        "    patterns = [(re.compile(regex), repl) for (regex, repl) in cont_patterns]\n",
        "    for (pattern, repl) in patterns:\n",
        "        doc = re.sub(pattern, repl, doc)\n",
        "    # 3) Remove special characters\\whitespaces\n",
        "    doc = re.sub(r'[^a-zA-Z\\s]+', '', doc)\n",
        "    #doc = doc.encode('utf-8')\n",
        "    #doc = str(doc,'utf-8').strip()\n",
        "    doc = doc.strip()\n",
        "    # tokenize document\n",
        "    tokens = wpt.tokenize(doc)\n",
        "    # filter stopwords out of document\n",
        "    filtered_tokens = [token for token in tokens if token not in stop_words]\n",
        "    # re-create document from filtered tokens\n",
        "    doc = ' '.join(filtered_tokens)\n",
        "    #doc = ' '.join(tokens)\n",
        "    return doc\n",
        "\n",
        "# Lemmaitze comments:\n",
        "def lemmatize_comment(comment):\n",
        "        doc = spacy_nlp(comment)\n",
        "        return [token.lemma_ for token in doc if token.lemma_ != '-PRON-' ]         \n",
        "\n",
        "\n",
        "## Clean and lemmatize comments\n",
        "#df['clean_comments'] = [clean_document(x) for x in df['comment_text']]\n",
        "#df['clean_comments_list'] = df['clean_comments'].apply(lambda x: x.split())\n",
        "#df['clean_lemmed'] = [lemmatize_comment(x) for x in df['clean_comments']]\n",
        "#df['clean_lemmed_str'] = df['clean_lemmed'].apply(lambda x: \" \".join(x))\n",
        "#train['clean_comments'] = [clean_document(x) for x in train['comment_text']]\n",
        "#train['clean_comments_list'] = train['clean_comments'].apply(lambda x: x.split())\n",
        "#train['clean_lemmed'] = [lemmatize_comment(x) for x in train['clean_comments']]\n",
        "#train['clean_lemmed_str'] = train['clean_lemmed'].apply(lambda x: \" \".join(x))\n",
        "\n",
        "## Write to csv for download\n",
        "#from google.colab import drive\n",
        "#drive.mount('/content/drive')\n",
        "#train['clean_comments'].to_csv('train_clean_comments.csv',sep=',',index=False)\n",
        "#train['clean_lemmed'].to_csv('train_clean_lemmed.csv',sep=',',index=False)\n",
        "\n",
        "## Read from csv\n",
        "train_clean_comments = pd.read_csv('train_clean_comments.csv',header=None)\n",
        "train_clean_lemmed = pd.read_csv('train_clean_lemmed.csv',header=None)\n",
        "\n",
        "## Transform cleaned/lemmed strings\n",
        "train['clean_comments'] = train_clean_comments[0].apply(lambda x: str(x))\n",
        "train['clean_comments_list'] = train['clean_comments'].apply(lambda x: x.split())\n",
        "train['clean_lemmed'] = train_clean_lemmed[0].apply(lambda x: ast.literal_eval(x))\n",
        "train['clean_lemmed_str'] = train['clean_lemmed'].apply(lambda x: \" \".join(x))\n",
        "\n",
        "class_names = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n",
            "  \"(https://pypi.org/project/six/).\", FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n",
            "  warnings.warn(message, FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/wordnet.zip.\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "HsGQpdB9hFMJ",
        "outputId": "dd036e83-048e-4c31-9db8-a676f356b839",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        }
      },
      "source": [
        "################### Compare with baseline TF-IDF features ###################\n",
        "\n",
        "# TF-IDF Vectorizer\n",
        "train_text = train['clean_lemmed_str']\n",
        "\n",
        "word_vectorizer = TfidfVectorizer(\n",
        "    min_df = 3,\n",
        "    max_df = 0.9,\n",
        "    sublinear_tf=True,\n",
        "    smooth_idf=True,\n",
        "    strip_accents='unicode',\n",
        "    analyzer='word',\n",
        "    token_pattern=r'\\w{1,}',\n",
        "    stop_words='english',\n",
        "    ngram_range=(1, 2),\n",
        "    max_features=20000)\n",
        "word_vectorizer.fit(train_text)\n",
        "train_word_features = word_vectorizer.transform(train_text)\n",
        "\n",
        "char_vectorizer = TfidfVectorizer(\n",
        "    min_df = 3,\n",
        "    max_df = 0.9,\n",
        "    sublinear_tf=True,\n",
        "    strip_accents='unicode',\n",
        "    analyzer='char',\n",
        "    stop_words='english',\n",
        "    ngram_range=(2, 6),\n",
        "    max_features=20000)\n",
        "char_vectorizer.fit(train_text)\n",
        "train_char_features = char_vectorizer.transform(train_text)\n",
        "\n",
        "train_tfidf_features = hstack([train_char_features, train_word_features]).tocsr()\n",
        "#train_tfidf_features = train_word_features.tocsr()\n",
        "\n",
        "# Create features about type of text and category of text\n",
        "def add_features(df):\n",
        "    # Get length in words and characters\n",
        "    df[\"word_count\"] = df[\"comment_text\"].apply(lambda x: len(x.split()))\n",
        "    df[\"word_len_avg\"] = df[\"comment_text\"].apply(lambda x: np.mean([len(x) for x in x.split()]))\n",
        "    df[\"word_len_std\"] = df[\"comment_text\"].apply(lambda x: np.std([len(x) for x in x.split()]))\n",
        "    df[\"char_count\"] = df[\"comment_text\"].apply(lambda x: len(x))\n",
        "    # Create count variables to see if any are useful\n",
        "    df[\"upper_ratio\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[A-Z]\", x)) /df['char_count']*100\n",
        "    df[\"number_ratio\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[0-9]\", x)) / df[\"char_count\"] *100\n",
        "    df[\"excl_ratio\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"!\", x)) / df[\"char_count\"] *100\n",
        "    df[\"quest_ratio\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"\\?\", x)) / df[\"char_count\"] *100\n",
        "    df[\"equals_ratio\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"=\", x)) / df[\"char_count\"] *100\n",
        "    df[\"punct_ratio\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[.!\\?=+#*|~-]\", x)) / df[\"char_count\"] *100\n",
        "    df[\"you_ratio\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"\\W[Yy]ou\\W\", x)) / df[\"word_count\"] *100\n",
        "    df[\"nb_fuck\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[Ff][uU][cC][Kk]\", x))\n",
        "    df[\"nb_suck\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[Ss]\\S{2}[Kk]\", x))\n",
        "    df[\"nb_dick\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[dD]ick\", x))\n",
        "    df[\"nb_penis\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[pP][eE][nN][iI][sS]\", x))\n",
        "    df[\"nb_pussy\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[pP][uU][sS][sS][yY]\", x))\n",
        "    df[\"nb_cock\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[cC]ock\", x))\n",
        "    df[\"8==D\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"8=+D\", x))\n",
        "    df[\"nb_gay\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[gG][aA][yY]\", x))\n",
        "    df[\"nb_bitch\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[bB][iI][tT][cC][hH]\", x))\n",
        "    df[\"nb_cunt\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[cC][uU][nN][tT]\", x))\n",
        "    df[\"nb_shut_up\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"[sS][hH][uU][tT]\\s[uU][pP]\", x))\n",
        "    df[\"nb_mother\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"\\Wmother\\W\", x))\n",
        "    df[\"nb_ng\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"\\Wnigger\\W\", x))\n",
        "    df[\"nb_ng_2\"] = df[\"comment_text\"].apply(lambda x: count_regexp_occ(r\"\\Wnigga\\W\", x))\n",
        "\n",
        "def pos_tagging(df):\n",
        "    df[\"comment_raw\"] = df[\"comment_text\"].apply(lambda x: re.sub(r'[\\n\\r\\t\\r\\n]',r' ',x,re.I|re.U))\n",
        "    df[\"POS\"] = df[\"comment_raw\"].apply(lambda x: [token.pos_ for token in spacy_nlp(x)])\n",
        "    \n",
        "def pos_features(df):\n",
        "    # Get number of proper nouns\n",
        "    df[\"PROPN\"] = df[\"POS\"].apply(lambda x: len([pos for pos in x if pos == 'PROPN']))\n",
        "    df[\"ADJ\"] = df[\"POS\"].apply(lambda x: len([pos for pos in x if pos == 'ADJ']))\n",
        "    df[\"INTJ\"] = df[\"POS\"].apply(lambda x: len([pos for pos in x if pos == 'INTJ']))\n",
        "    df[\"SYM\"] = df[\"POS\"].apply(lambda x: len([pos for pos in x if pos == 'SYM']))\n",
        "\n",
        "    \n",
        "#add_features(train)\n",
        "#pos_tagging(df)\n",
        "#pos_features(df)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/feature_extraction/text.py:520: UserWarning: The parameter 'stop_words' will not be used since 'analyzer' != 'word'\n",
            "  warnings.warn(\"The parameter 'stop_words' will not be used\"\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8co9F7nAsNAg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_features.shape"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TiYfLT5uX6RG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Set LGBM parameters\n",
        "params = {\n",
        "    \"objective\": \"binary\",\n",
        "    'metric': {'auc'},\n",
        "    \"boosting_type\": \"gbdt\",\n",
        "    \"verbosity\": -1,\n",
        "    \"num_threads\": -1,\n",
        "    \"bagging_fraction\": 0.8,\n",
        "    \"feature_fraction\": 0.8,\n",
        "    \"learning_rate\": 0.1,\n",
        "    \"num_leaves\": 31,\n",
        "    \"verbose\": -1\n",
        "    #\"min_split_gain\": .1,\n",
        "    #\"reg_alpha\": .1\n",
        "}"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NfTxVylQrWHG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## See what class imbalance is for response classes\n",
        "for clss in class_names:\n",
        "    true = [x for x in train[clss] if x == 1]\n",
        "    print(clss + \": \" + str(round(len(true)/len(train[clss])*100,2))+ \"%\")\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x2XcWubNhtuj",
        "colab_type": "code",
        "outputId": "ef390804-ee75-4795-9078-746e49d5a6a9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "##### Investigating class imbalance + improving recall #####\n",
        "resp = 'severe_toxic'\n",
        "training_labels = train[resp]\n",
        "train_features = train_tfidf_features\n",
        "seed = 1234\n",
        "splits = 3\n",
        "folds = StratifiedKFold(n_splits=splits, shuffle=True, random_state=seed)\n",
        "\n",
        "from imblearn.combine import SMOTETomek\n",
        "from imblearn.over_sampling import SMOTE, SVMSMOTE\n",
        "from imblearn.under_sampling import RandomUnderSampler, TomekLinks\n",
        "from imblearn.pipeline import Pipeline\n",
        "\n",
        "\n",
        "## Over_sampling and under_sampling\n",
        "over_ratios = [0.05,0.1,0.2]\n",
        "\n",
        "\n",
        "\n",
        "for ratio in over_ratios:\n",
        "  # Define new re-sampled data\n",
        "  class_pred = np.zeros(train_features.shape[0])\n",
        "  # Use 5-fold cross-validation to evaluate performance at given over-sampling ratio.\n",
        "  auc,precision,recall,thresholds = [],[],[],[]\n",
        "  for n_fold, (trn_idx, val_idx) in enumerate(folds.split(train_features, training_labels)):\n",
        "    # Define pipeline to oversample, undersample, and then cross-validate using NB-SVM\n",
        "    over = SVMSMOTE(sampling_strategy=ratio,k_neighbors=5)\n",
        "    under = TomekLinks(sampling_strategy='majority')\n",
        "    #steps = [('over', over), ('under', under), ('model', model)]\n",
        "    #pipeline = Pipeline(steps=steps)\n",
        "    # evaluate pipeline\n",
        "    X_re, y_re = over.fit_resample(train_features[trn_idx],training_labels[trn_idx])\n",
        "    X_re, y_re = under.fit_resample(X_re,y_re)    \n",
        "    trn_lgbset = lgb.Dataset(X_re, free_raw_data=False)\n",
        "    trn_lgbset.set_label(y_re)\n",
        "    lgb_rounds = 500\n",
        "    #pipeline.fit(train_features[trn_idx], training_labels[trn_idx])\n",
        "    #y_hat = pipeline.predict(train_features[val_idx])\n",
        "    #print(classification_report(training_labels[val_idx], y_hat))\n",
        "\n",
        "    #X_re, y_re = smt.fit_sample(train_features[trn_idx], training_labels[trn_idx])\n",
        "    #print(\"Class distribution with ratio {}: \".format(str(ratio)),sorted(Counter(y_re).items()))\n",
        "    #model = NbSvmClassifier(C=4, tol=1e-4, dual=False, n_jobs=-1,multi_class='auto').fit(X_re, y_re)\n",
        "    model = lgb.train(params=params,\n",
        "                      train_set=trn_lgbset, \n",
        "                      num_boost_round=lgb_rounds,\n",
        "                      valid_sets=[lgb.Dataset(train_features[val_idx], free_raw_data=False)],\n",
        "                      early_stopping_rounds=50,\n",
        "                      verbose_eval=0)\n",
        "    #class_pred[val_idx] = model.predict_proba(train_features[val_idx])[:,1]\n",
        "    class_pred[val_idx] = model.predict(train_features[val_idx], num_iteration=model.best_iteration)\n",
        "    #print(classification_report(training_labels[val_idx], class_pred[val_idx]))\n",
        "    auc.append(roc_auc_score(training_labels[val_idx], class_pred[val_idx],average='weighted'))\n",
        "    prec, recal, thresh = precision_recall_curve(training_labels[val_idx], class_pred[val_idx])\n",
        "    precision.append(prec)\n",
        "    recall.append(recal)\n",
        "    thresholds.append(thresh)\n",
        "  # Print out mean AUC score\n",
        "  print(\"SMOTE ratio: \",str(ratio),' | mean AUC: ',str(round(np.mean(auc),4)))\n",
        "  # Plot precision-recall curve\n",
        "  plt.figure()\n",
        "  plt.plot(recall[0], precision[0], 'ro', linewidth=2,label='Fold 1 Preds')\n",
        "  plt.plot(recall[1], precision[1], 'bo', linewidth=2,label='Fold 2 Preds')\n",
        "  plt.plot(recall[2], precision[2], 'go', linewidth=2,label='Fold 3 Preds')\n",
        "  #plt.plot(recall[3], precision[3], 'yo', linewidth=2,label='Fold 4 Preds')\n",
        "  #plt.plot(recall[4], precision[4], 'mo', linewidth=2,label='Fold 5 Preds')\n",
        "  plt.xlabel('Recall')\n",
        "  plt.ylabel('Precision')\n",
        "  plt.title('Ratio: '+str(ratio)+' | Average Precision: '+str(average_precision_score(training_labels,class_pred,average='weighted')))\n",
        "  plt.legend()\n",
        "  plt.show()\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "SMOTE ratio:  0.05  | mean AUC:  0.8919\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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7OOeczJs2DA2bdrEZ599lnLdNgy1McYkkaNRqDttGOo//OEPHHbYYey2224p04V2GGpjjEknR6NQd8ow1MuXL+dHP/oRTz/9dNI0oR+G2hhj0umuo1A3NDQwfvx47r33Xr74xS8mTWfDUBtjTBqdNAp1VoehXr9+Paeeeio33XQTxxxzTIfyZcNQG2NCrxNHoc7aMNS//vWvWblyJVOnTmXqVPfkw6effpqBAwe2O082DPUusmGojenabBjq/LNhqI0xxrSLBQJjjAk5CwTGGBNyFgiMMSbkLBAYY0zIWSAwxpiQs0BgjOlxcjkM9d///veW5Y4cOZJHH3004XIrKysZPnw4I0aM4KSTTspo7KJkpkyZwq233rrL30/HAoExJq+iy6JU/rKSgusLqPxlJdFlHR96NJfDUB9yyCEsXLiQxYsX8+STT/Kd73yHbdu2JUz77LPPsnTpUqqqqvjpT3/aap6qsmPHjqzlqyMsEBhj8ia6LEr13Grqm+pRlPqmeqrnVmclGMTL1jDUJSUl9OrlBmXYvHkzIpJ23bFhqOvq6jjwwAO54IILOOSQQ1i9ejU///nPOeKIIxgxYgTXXXddy3dqamo44IADOPbYY1s91OaOO+5g6NChjBgxgnPOOae9uyEhCwTGmLyZPH8yzVtbj0PdvLWZyfM7Ng51roehfvnllxk2bBjDhw9n+vTpLYEhmT/96U8tw1C/8847TJo0ieXLl/PWW2/xzjvv8Pe//53FixezaNEinn/+eRYtWsQDDzzA4sWLmTdvHq+88krLsm666SZee+01li5dyvTp03d1F7ViYw0ZY/JmVVPi8aaTTc9UroehHj16NMuXL2fFihVMnDiRcePGUVxc3CbdCSecQGFhISNGjODGG29k/fr1VFRUcNRRRwFujKKnn36aQw89FICNGzfyzjvvsGHDBsaPH0+JH5HvtNNOa1nmiBEjiEQinHHGGZxxxhm7uotasRKBMSZvyvslHm862fSu5uCDD6Zv3768/vrrCec/++yzLF68mHvvvZf+/fsDsPvuu7fMV1V+/OMft7RlrFy5kosvvjjlOh9//HEuu+wyXn31VY444oik7RPtYYHAGJM3NWNrKClqPQ51SVEJNWOzOw51Noehfv/991tOvvX19bz55pu73Bj91a9+lRkzZrBx40YA1qxZw4cffsjxxx/PY489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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "SMOTE ratio:  0.1  | mean AUC:  0.8968\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0qCdAWY4Ryah",
        "colab_type": "code",
        "outputId": "7b560e53-b4d5-4657-d675-b912098f088d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        }
      },
      "source": [
        "resp = 'severe_toxic'\n",
        "training_labels = train[resp]\n",
        "train_features = train_tfidf_features\n",
        "seed = 1234\n",
        "splits = 5\n",
        "folds = StratifiedKFold(n_splits=splits, shuffle=True, random_state=seed)\n",
        "\n",
        "ratio = 0.1\n",
        "\n",
        "class_pred = np.zeros(train_features.shape[0])\n",
        "# Use 5-fold cross-validation to evaluate performance at given over-sampling ratio.\n",
        "auc,precision,recall,thresholds = [],[],[],[]\n",
        "(trn_idx, val_idx) = list(folds.split(train_features, training_labels))[0]\n",
        "# Define pipeline to oversample, undersample, and then cross-validate using NB-SVM\n",
        "over = SVMSMOTE(sampling_strategy=ratio,k_neighbors=5)\n",
        "under = TomekLinks(sampling_strategy='majority')\n",
        "#steps = [('over', over), ('under', under), ('model', model)]\n",
        "#pipeline = Pipeline(steps=steps)\n",
        "# evaluate pipeline\n",
        "X_re, y_re = over.fit_resample(train_features[trn_idx],training_labels[trn_idx])\n",
        "X_re, y_re = under.fit_resample(X_re,y_re)\n",
        "#pipeline.fit(train_features[trn_idx], training_labels[trn_idx])\n",
        "#y_hat = pipeline.predict(train_features[val_idx])\n",
        "#print(classification_report(training_labels[val_idx], y_hat))\n",
        "\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0tzK45vLCFvF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "# Check that X and y have correct shape\n",
        "#y = y.values\n",
        "x, y = check_X_y(x, y, accept_sparse=True)\n",
        "\n",
        "def pr(x, y_i, y):\n",
        "  p = x[y==y_i].sum(0)\n",
        "  return (p+1) / ((y==y_i).sum()+1)\n",
        "\n",
        "r = sparse.csr_matrix(np.log(pr(x,1,y) / pr(x,0,y)))\n",
        "x_nb = x.multiply(self._r)\n",
        "self._clf = LogisticRegression(C=self.C, tol=self.tol, dual=self.dual, n_jobs=self.n_jobs, class_weight='balanced').fit(x_nb, y)\n",
        "return self"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ELaIcB7TSOtk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#X_re, y_re = smt.fit_sample(train_features[trn_idx], training_labels[trn_idx])\n",
        "#print(\"Class distribution with ratio {}: \".format(str(ratio)),sorted(Counter(y_re).items()))\n",
        "model = NbSvmClassifier(C=4, tol=1e-4, dual=False, n_jobs=-1,multi_class='auto').fit(X_re, y_re)\n",
        "class_pred[val_idx] = model.predict_proba(train_features[val_idx])[:,1]\n",
        "print(classification_report(training_labels[val_idx], class_pred[val_idx]))\n",
        "auc.append(roc_auc_score(training_labels[val_idx], class_pred[val_idx],average='weighted'))\n",
        "prec, recal, thresh = precision_recall_curve(training_labels[val_idx], class_pred[val_idx])\n",
        "precision.append(prec)\n",
        "recall.append(recal)\n",
        "thresholds.append(thresh)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9_zCGU9IqADX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Fit model using 5-fold CV, display PR curve\n",
        "resp = 'severe_toxic'\n",
        "train_features = train_tfidf_features\n",
        "\n",
        "training_labels = train[resp]\n",
        "class_pred = np.zeros(train_features.shape[0])\n",
        "auc,precision,recall,thresholds = [],[],[],[]\n",
        "\n",
        "# Make predictions for each fold in split, calculate evaluation metrics\n",
        "for n_fold, (trn_idx, val_idx) in enumerate(folds.split(train_features, training_labels)):\n",
        "  # Train NB-SVM\n",
        "  model = NbSvmClassifier(C=4, tol=1e-4, dual=False, n_jobs=-1,multi_class='auto').fit(train_features[trn_idx], training_labels[trn_idx])\n",
        "  class_pred[val_idx] = model.predict_proba(train_features[val_idx])[:,1]\n",
        "  auc.append(roc_auc_score(training_labels[val_idx], class_pred[val_idx],average='weighted'))\n",
        "  prec, recal, thresh = precision_recall_curve(training_labels[val_idx], class_pred[val_idx])\n",
        "  precision.append(prec)\n",
        "  recall.append(recal)\n",
        "  thresholds.append(thresh)\n",
        "\n",
        "# Print out mean AUC score\n",
        "print(\"fit: \",resp,' | mean AUC: ',str(round(np.mean(auc),4)))\n",
        "print(\"Thresholds: \"+str(thresholds[4]))\n",
        "print(\"Precision: \"+str(precision[4]))\n",
        "# Plot precision-recall curve\n",
        "plt.figure()\n",
        "plt.plot(recall[0], precision[0], 'ro', linewidth=2,label='Fold 1 Preds')\n",
        "plt.plot(recall[1], precision[1], 'bo', linewidth=2,label='Fold 2 Preds')\n",
        "plt.plot(recall[2], precision[2], 'go', linewidth=2,label='Fold 3 Preds')\n",
        "plt.plot(recall[3], precision[3], 'yo', linewidth=2,label='Fold 4 Preds')\n",
        "plt.plot(recall[4], precision[4], 'mo', linewidth=2,label='Fold 5 Preds')\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Class: '+resp+' | Average Precision: '+str(average_precision_score(training_labels,class_pred,average='weighted')))\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p3tTu71X3gUp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "##### Fit NBSVM Model #####\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "train_features = train_tfidf_features\n",
        "\n",
        "#class_names = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']\n",
        "class_names = ['severe_toxic','threat','identity_hate']\n",
        "seed = 1234\n",
        "splits = 5\n",
        "folds = StratifiedKFold(n_splits=splits, shuffle=True, random_state=seed)\n",
        "\n",
        "for i, j in enumerate(class_names):\n",
        "    training_labels = train[j]\n",
        "    class_pred = np.zeros(len(train))\n",
        "    auc,precision,recall,thresholds = [],[],[],[]\n",
        "\n",
        "    # Make predictions for each fold in split, calculate evaluation metrics\n",
        "    for n_fold, (trn_idx, val_idx) in enumerate(folds.split(train_features, training_labels)):\n",
        "      # Train NB-SVM\n",
        "      model = NbSvmClassifier(C=4, tol=1e-4, dual=False, n_jobs=-1,multi_class='auto')\n",
        "      model.fit(train_features[trn_idx], training_labels[trn_idx])\n",
        "      class_pred[val_idx] = model.predict_proba(train_features[val_idx])[:,1]\n",
        "      auc.append(roc_auc_score(training_labels[val_idx], class_pred[val_idx],average='weighted'))\n",
        "      prec, recal, thresh = precision_recall_curve(training_labels[val_idx], class_pred[val_idx])\n",
        "      precision.append(prec)\n",
        "      recall.append(recal)\n",
        "      thresholds.append(thresh)\n",
        "\n",
        "    # Print out mean AUC score\n",
        "    print(\"fit: \",j,' | mean AUC: ',str(round(np.mean(auc),4)))\n",
        "    print(\"Thresholds: \"+str(thresholds[4]))\n",
        "    print(\"Precision: \"+str(precision[4]))\n",
        "    # Plot precision-recall curve\n",
        "    plt.figure()\n",
        "    plt.plot(recall[0], precision[0], 'ro', linewidth=2,label='Fold 1 Preds')\n",
        "    plt.plot(recall[1], precision[1], 'bo', linewidth=2,label='Fold 2 Preds')\n",
        "    plt.plot(recall[2], precision[2], 'go', linewidth=2,label='Fold 3 Preds')\n",
        "    plt.plot(recall[3], precision[3], 'yo', linewidth=2,label='Fold 4 Preds')\n",
        "    plt.plot(recall[4], precision[4], 'mo', linewidth=2,label='Fold 5 Preds')\n",
        "    plt.xlabel('Recall')\n",
        "    plt.ylabel('Precision')\n",
        "    plt.title('Class: '+j+' | Average Precision: '+str(average_precision_score(training_labels,class_pred,average='weighted')))\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "    \n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jgseRNtSa4O8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "##### Bayesian Hyperparameter Tuning for Severe Toxic Class #####\n",
        "\n",
        "#warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "train_features = train_tfidf_features\n",
        "\n",
        "class_names_2 = ['severe_toxic', 'threat', 'identity_hate']\n",
        "seed = 1234\n",
        "splits = 5\n",
        "folds = StratifiedKFold(n_splits=splits, shuffle=True, random_state=seed)\n",
        "\n",
        "j = 'threat'\n",
        "training_labels = train[j]\n",
        "class_pred = np.zeros(train_features.shape[0])\n",
        "auc,precision,recall,thresholds = [],[],[],[]\n",
        "\n",
        "### Define functions for Bayesian Hyperparameter Optimization (SMBO using TPE)\n",
        "from hyperopt import fmin, tpe, hp, Trials, STATUS_OK, space_eval\n",
        "from sklearn.metrics import r2_score, roc_auc_score, accuracy_score, f1_score, confusion_matrix, classification_report, roc_curve, make_scorer\n",
        "\n",
        "# 1) Define objective \n",
        "\n",
        "def objective(params):\n",
        "    time1 = time.time()\n",
        "    params = {\n",
        "        'C': params['C'],\n",
        "        'tol': params['tol'],\n",
        "    }\n",
        "\n",
        "    print(\"\\n############## New Run ################\")\n",
        "    print(f\"params = {params}\")\n",
        "    seed = 1234\n",
        "    splits = 5\n",
        "    folds = StratifiedKFold(n_splits=splits, shuffle=True, random_state=seed)\n",
        "    score_mean = 0\n",
        "    class_pred = np.zeros(train_features.shape[0])\n",
        "\n",
        "    for n_fold, (trn_idx, val_idx) in enumerate(folds.split(train_features, training_labels)):\n",
        "      clf = NbSvmClassifier(C=params['C'], tol=params['tol'], dual=False,n_jobs=-1,multi_class='auto')\n",
        "      clf.fit(train_features[trn_idx], training_labels[trn_idx])\n",
        "      class_pred[val_idx] = clf.predict_proba(train_features[val_idx])[:,1]\n",
        "      score = average_precision_score(training_labels[val_idx],class_pred[val_idx],average='weighted')\n",
        "      score_mean += score\n",
        "    time2 = time.time() - time1\n",
        "    print(f\"Total Time Run: {round(time2 / 60,2)}\")\n",
        "    #gc.collect()\n",
        "    print(f'Average Precision Score: {score_mean/splits}')\n",
        "    return -(score_mean / splits)\n",
        "\n",
        "\n",
        "# 2) Define search space\n",
        "\n",
        "space = {\n",
        "    'C': hp.lognormal('C', 0,1),\n",
        "    'tol': hp.choice('tol',[1e-7,1e-6,1e-5,1e-4,1e-3,1e-2])\n",
        "}    \n",
        "\n",
        "# 3) Specify Optimization algorithm\n",
        "tpe_algo = tpe.suggest\n",
        "\n",
        "# 4) Instantiate Trials object to track results\n",
        "tpe_trials = Trials()\n",
        "\n",
        "# Set hyperopt parameters\n",
        "best = fmin(fn=objective,\n",
        "            space=space,\n",
        "            algo=tpe_algo,\n",
        "            trials = tpe_trials,\n",
        "            max_evals=1000)\n",
        "# Print best parameters\n",
        "best_params = space_eval(space, best)\n",
        "print(\"BEST PARAMS: \", best_params)\n",
        "\n",
        "# Make predictions for each fold in split, calculate evaluation metrics\n",
        "for n_fold, (trn_idx, val_idx) in enumerate(folds.split(train_features, training_labels)):\n",
        "  # Train NB-SVM\n",
        "  model = NbSvmClassifier(C=best_params['C'], tol=best_params['tol'], dual=False, n_jobs=-1,multi_class='auto')\n",
        "  model.fit(train_features[trn_idx], training_labels[trn_idx])\n",
        "  class_pred[val_idx] = model.predict_proba(train_features[val_idx])[:,1]\n",
        "  auc.append(roc_auc_score(training_labels[val_idx], class_pred[val_idx],average='weighted'))\n",
        "  prec, recal, thresh = precision_recall_curve(training_labels[val_idx], class_pred[val_idx])\n",
        "  precision.append(prec)\n",
        "  recall.append(recal)\n",
        "  thresholds.append(thresh)\n",
        "\n",
        "# Print out mean AUC score\n",
        "print(\"fit: \",j,' | mean AUC: ',str(round(np.mean(auc),4)))\n",
        "# Plot precision-recall curve\n",
        "plt.figure()\n",
        "plt.plot(recall[0], precision[0], 'ro', linewidth=2,label='Fold 1 Preds')\n",
        "plt.plot(recall[1], precision[1], 'bo', linewidth=2,label='Fold 2 Preds')\n",
        "plt.plot(recall[2], precision[2], 'go', linewidth=2,label='Fold 3 Preds')\n",
        "plt.plot(recall[3], precision[3], 'yo', linewidth=2,label='Fold 4 Preds')\n",
        "plt.plot(recall[4], precision[4], 'mo', linewidth=2,label='Fold 5 Preds')\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.title('Class: '+j+' | Average Precision: '+str(average_precision_score(training_labels,class_pred,average='weighted')))\n",
        "plt.legend()\n",
        "plt.show()\n",
        "    "
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}